import ij.CompositeImage;
import org.micromanager.graph.HistogramSettings;

// Retrieve Live window's contrast.
liveMan = gui.getSnapLiveManager();
liveMan.moveDisplayToFront();
Thread.sleep(100);
contrast = gui.getContrastSettings();
print(contrast.min);
print(contrast.max);
histgram = new HistogramSettings(contrast.min,contrast.max,contrast.gamma,65535,CompositeImage.GRAYSCALE);
gui.saveChannelHistogramSettings(mmc.getChannelGroup(),"GNP default",true,histgram);
gui.saveChannelHistogramSettings(mmc.getChannelGroup(),"GNP default",false,histgram);

gui.setChannelContrast("stat",0,contrast.min,contrast.max);
gui.runAcquisition("stat",acq.getRootName());
gui.runAcquisition("extend",acq.getRootName());


// See what 'runAcquisition' does.
protected String runAcquisition(SequenceSettings acquisitionSettings, 
           AcquisitionManager acqManager) {
      //Make sure computer can write to selected location and that there is enough space to do so
      if (saveFiles_) {
         File root = new File(rootName_);
         if (!root.canWrite()) {
            int result = JOptionPane.showConfirmDialog(null, 
                    "The specified root directory\n" + root.getAbsolutePath() +
                    "\ndoes not exist. Create it?", "Directory not found.", 
                    JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
               root.mkdirs();
               if (!root.canWrite()) {
                  ReportingUtils.showError(
                          "Unable to save data to selected location: check that location exists.\nAcquisition canceled.");
                  return null;
               }
            } else {
               ReportingUtils.showMessage("Acquisition canceled.");
               return null;
            }
         } else if (!this.enoughDiskSpace()) {
            ReportingUtils.showError(
                    "Not enough space on disk to save the requested image set; acquisition canceled.");
            return null;
         }
      }

      // If we don't stop Live here, we run into trouble if any processors are
      // active, because the processor pipeline would get rewired before it
      // finishes processing live images.
      studio_.enableLiveMode(false);

      try {
         // Start up the acquisition engine
         BlockingQueue<TaggedImage> engineOutputQueue = getAcquisitionEngine2010().run(
                 acquisitionSettings, true,
                 studio_.getPositionList(),
                 studio_.getAutofocusManager().getDevice());
         summaryMetadata_ = getAcquisitionEngine2010().getSummaryMetadata();
         org.micromanager.events.EventManager.post(
               new SummaryMetadataEvent(summaryMetadata_));

         // Run the Acquisition Engine output through a pipeline of ImageProcessors
         BlockingQueue<TaggedImage> procStackOutputQueue = ProcessorStack.run(
                 engineOutputQueue, taggedImageProcessors_);

         // Create an MMAcquisition object, which will result in an ImageCache
         // and VirtualImageDisplay if desired
         String acqName = acqManager.createAcquisition(
                 summaryMetadata_, acquisitionSettings.save, this,
                 studio_.getHideMDADisplayOption());
         MMAcquisition acq = acqManager.getAcquisition(acqName);
         imageCache_ = acq.getImageCache();

         // Start pumping processed images into the ImageCache
         DefaultTaggedImageSink sink = new DefaultTaggedImageSink(
                 procStackOutputQueue, imageCache_);
         sink.start(new Runnable() {
            @Override
            public void run() {
               getAcquisitionEngine2010().stop();
            }
         });
        
         return acqName;

      } catch (Throwable ex) {
         ReportingUtils.showError(ex);
         return null;
      }
   }


